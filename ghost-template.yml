Parameters:
  DBMasterUsername:
    Type: String
    Default: ghostadmin
    Description: Master username for the RDS Instance
  DBMasterPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41
  EC2AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-cd0f5cb6
    Description: "Amazon Machine Image ID"
  EC2InstanceType:
    Type: String
    Default: t2.micro
    Description: "Instance type for Ghost blog"
  KeyPair: 
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key Pair used for web server
  DNSRecordName: 
    Type: String
    Description: DNS Record name for Route 53

Resources:
  DBCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      Engine: aurora
      MasterUsername:
        Ref: DBMasterUsername
      MasterUserPassword: 
        Ref: DBMasterPassword
      VpcSecurityGroupIds:
        -
          !GetAtt RDSSecurityGroup.GroupId

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora
      DBInstanceIdentifier: ghost
      DBInstanceClass: db.t2.small
      DBClusterIdentifier: 
        Ref: DBCluster

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - Database
      - RdsPasswordSsmParameter
      - RdsEndpointSsmParameter
      - RdsUsernameSsmParameter
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
    Properties:
      MaxSize: 1
      MinSize: 1
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      AvailabilityZones:
        -
          us-east-1a
      LoadBalancerNames:
        - !Ref LoadBalancer
  WebServerIamRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  WebServerIamPolicy: 
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: GhostWebServerAccess
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "SSM:*"
            Resource: "*"
      Roles: 
        - 
          Ref: "WebServerIamRole"
  WebServerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    DependsOn:
      - WebServerIamPolicy
    Properties: 
      Roles:
        - !Ref WebServerIamRole
      InstanceProfileName: String
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: EC2AmiId
      InstanceType:
        Ref: EC2InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt-get -y install nginx
          sudo apt-get -y install unzip
          sudo apt-get -y install python
          sudo apt-get -y install jq
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
          INSTANCE_REGION=$(curl http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r ".region")
          aws configure set region $INSTANCE_REGION
          sudo ufw allow 'Nginx Full'
          curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash
          sudo apt-get install -y nodejs
          sudo npm i -g ghost-cli
          sudo mkdir -p /var/www/ghost
          sudo chown ubuntu:ubuntu /var/www/ghost
          cd /var/www/ghost
          DNS_NAME=$(aws ssm get-parameters --name GhostDnsRecord | jq -r '.Parameters[0].Value')
          INSTANCE_REGION=$(curl http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r ".region")
          RDS_CLUSTER_ENDPOINT=$(aws ssm get-parameters --name GhostRdsEndpoint | jq -r '.Parameters[0].Value')
          RDS_CLUSTER_USERNAME=$(aws ssm get-parameters --name GhostRdsUserName | jq -r '.Parameters[0].Value')
          RDS_CLUSTER_PASSWORD=$(aws ssm get-parameters --name GhostRdsPassword --with-decryption | jq -r '.Parameters[0].Value')
          ghost install --no-prompt --url "http://$DNS_NAME" --dbhost $RDS_CLUSTER_ENDPOINT --dbuser $RDS_CLUSTER_USERNAME --dbpass $RDS_CLUSTER_PASSWORD
      KeyName:
        Ref: KeyPair
      IamInstanceProfile: !Ref WebServerInstanceProfile
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for Ghost Web Server
      SecurityGroupIngress: 
        - 
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ElasticLoadBalancerSecurityGroup.GroupId
        - 
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt ElasticLoadBalancerSecurityGroup.GroupId
        - 
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Ghost RDS instance"
      SecurityGroupIngress: 
        -
          IpProtocol: "tcp"
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
  ElasticLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Ghost Elastic Loadbalancer"
      SecurityGroupIngress: 
        -
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
  SSMSecureParameterLambda:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          ssm = boto3.client('ssm')
          def create_ssm_secure_parameter(Name,Description,Value):
              try:
                  ssm.put_parameter(
                          Name=Name,
                          Description=Description,
                          Value=Value,
                          Type='SecureString',
                          Overwrite=False
                      )
                  print(f"created secure ssm parameter: \"{Name}\"")
              except Exception as e:
                  raise Exception(f"unable to create parameter: \"{Name}\". error:" + str(e))

          def update_ssm_secure_parameter(Name,Description,Value):
              try:
                  ssm.put_parameter(
                          Name=Name,
                          Description=Description,
                          Value=Value,
                          Type='SecureString',
                          Overwrite=True
                      )
                  print(f"created secure ssm parameter: \"{Name}\"")
              except Exception as e:
                  raise Exception(f"unable to create parameter: \"{Name}\". error:" + str(e))

          def delete_ssm_parameter(Name):
              try:
                  ssm.delete_parameter(Name=Name)
                  print(f"deleted parameter: {Name}")
              except Exception as e: 
                  if 'ParameterNotFound' in str(e):
                      print(f"called delete_parameter for \"{Name}\", but the ssm parameter does not exist")
                  else:
                      raise Exception(f"unable to delete parameter \"{Name}\". error:" + str(e))
                      
          def lambda_handler(event, context):
              print(f"received event: {event}")
              params = event['ResourceProperties']

              def send_cfn_response(isSuccess, response):
                  status = cfnresponse.SUCCESS if isSuccess else cfnresponse.FAILED
                  responseToSend = repsonse if response else {}
                  cfnresponse.send(event, context, status, responseToSend)

              try:
                  if event['RequestType'] == 'Delete':
                      delete_ssm_parameter(params['Name'])
                  elif event['RequestType'] == 'Create':
                      create_ssm_secure_parameter(params['Name'],params['Description'],params['Value'])
                  elif event['RequestType'] == 'Update':
                      update_ssm_secure_parameter(params['Name'],params['Description'],params['Value'])
                  else:
                      raise Exception(f"No valid RequestType. Must pass RequestType: Create, Update, Delete")
                  send_cfn_response(True,{})
              except Exception as e:
                  send_cfn_response(False,{})
      Description: "Custom cfn-resource to manage secure ssm parameters"
      Handler: index.lambda_handler
      Role: arn:aws:iam::362142250279:role/lambda_test
      Runtime: python3.6
      Timeout: 20
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 80
          Protocol: HTTP
        - LoadBalancerPort: 443
          InstancePort: 80
          Protocol: HTTPS
          SSLCertificateId: !Ref SslCertificate
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
      CrossZone: true
      SecurityGroups: 
        - !GetAtt ElasticLoadBalancerSecurityGroup.GroupId
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: 
        Fn::Join: 
        - ""
        - - !Ref DNSRecordName
          - "."
      Name: 
        Fn::Join: 
        - ""
        - - !Ref DNSRecordName
          - "."
      AliasTarget: 
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: True
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneNameID
      Type: A
  RdsPasswordSsmParameter:
    Type: "Custom::RdsPassword"
    Properties:
      ServiceToken: !GetAtt SSMSecureParameterLambda.Arn
      Name: GhostRdsPassword
      Description: "The password for ghost blog database instance"
      Value: !Ref DBMasterPassword
  RdsUsernameSsmParameter:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: GhostRdsUserName
      Description: "The useranme for the ghost blog database instance"
      Type: String
      Value: !Ref DBMasterUsername
  RdsEndpointSsmParameter:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: GhostRdsEndpoint
      Description: "The connection string for the ghost blog database instance"
      Type: String
      Value: !GetAtt DBCluster.Endpoint.Address
  DnsRecordSsmParameter:
    Type: "AWS::SSM::Parameter"
    Properties: 
      Name: GhostDnsRecord
      Description: "The the domain name for the ghost blog"
      Type: String
      Value: !Ref DNSRecordName
  SslCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref DNSRecordName


